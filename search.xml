<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>用Hexo來建立的你的BLOG</title>
    <url>/hexo-setup/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>唯有不斷的學習充實自己，方能使自己持續成長，程式語言的世界中只有學無止盡，人腦不比電腦，我們只能透過紀錄的方式來加深印象，甚至是幫助也正在學習的你們。最後終於花了點時間看完官方的文件，也終於將BLOG的雛型給建立起來，俗話話說得好打鐵就是要趁熱，馬上完成第一篇教學紀錄。</p>
<a id="more"></a>

<h2 id="使用-Hexo-的原因"><a href="#使用-Hexo-的原因" class="headerlink" title="使用 Hexo 的原因"></a>使用 Hexo 的原因</h2><p>在一開始計畫要寫BLOG的時候，上網找了許多資源，但有的不是介面老舊，就是CODE的排版不友善，要不然就是要花上一筆費用，視錢如命的我怎麼可能輕易妥協，就找到了Hexo啦!</p>
<ul>
<li>快速的Deploy到Github(免費仔如我，可是超級心動DERRRRRRRRRR)</li>
<li>透過Hexo、MARKDOWN，BLOG輕輕鬆鬆建置起來</li>
<li>支援多種外掛跟免費主題，選擇性非常高</li>
<li>免費仔最關心的一點，Github不會輕易掛掉阿!</li>
</ul>
<h2 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h2><ul>
<li><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener" title="Node.js">Node.js</a> (官方文件建議使用 Node.js 10.0 及以上版本)，根據自己的作業系統選擇安裝檔。</li>
<li><a href="https://git-scm.com/" target="_blank" rel="noopener" title="Git">Git</a>，當然你要申請一組<a href="https://github.com/" target="_blank" rel="noopener" title="Git">Github</a>的帳號，之後要直接Deploy到你的 <code>git repository</code></li>
</ul>
<hr>
<h1 id="Hexo安裝"><a href="#Hexo安裝" class="headerlink" title="Hexo安裝"></a>Hexo安裝</h1><p>前置作業完成後，我們就開始來安裝Hexo</p>
<ul>
<li><p>打開 <code>Git Bash</code>, 輸入以下指令來安裝Hexo</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="Hexo-專案建立"><a href="#Hexo-專案建立" class="headerlink" title="Hexo 專案建立"></a>Hexo 專案建立</h2><ul>
<li>根據你目前<code>Git bash</code>的路徑建立一個Hexo的專案<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init my_blog <span class="comment"># my_blog可自己定義名稱，hexo會幫你初始化</span></span><br><span class="line">$ <span class="built_in">cd</span> my_blog <span class="comment"># 切換至初始化的my_blog資料夾</span></span><br><span class="line">$ npm install <span class="comment"># 開始安裝npm套件</span></span><br></pre></td></tr></table></figure></li>
<li>建置完成後的結果:  <img src="/images/hexo-setup_init.png">

</li>
</ul>
<h2 id="Hexo-預覽你的BlOG"><a href="#Hexo-預覽你的BlOG" class="headerlink" title="Hexo 預覽你的BlOG"></a>Hexo 預覽你的BlOG</h2><ul>
<li>專案初始化完畢，馬上就可以在local試試看效果吧<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean <span class="comment"># 移除所有靜態檔</span></span><br><span class="line">$ hexo s -g <span class="comment"># 啟動server，generate靜態檔</span></span><br></pre></td></tr></table></figure></li>
<li>當Server建置完成的時候，就可以到Hexo所預設的連結預覽 <code>http://localhost:4000/</code>  <img src="/images/hexo-setup_page.png">

</li>
</ul>
<hr>
<h1 id="Hexo-設定檔介紹"><a href="#Hexo-設定檔介紹" class="headerlink" title="Hexo 設定檔介紹"></a>Hexo 設定檔介紹</h1><ul>
<li><code>my_blog/scaffolds</code>:<br>裡面三個檔案分別是你建立文章的時候所預設的相關訊息，<br>例如是否需要時間戳記、Title的名稱…等，這樣一來每次當你文章建立完成的時候，就不需要重複設定在填寫相關的欄位  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">top: <span class="literal">false</span></span><br><span class="line">cover: <span class="literal">false</span></span><br><span class="line">password:</span><br><span class="line">toc: <span class="literal">true</span></span><br><span class="line">mathjax: <span class="literal">true</span></span><br><span class="line">summary:</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li>
<li><code>my_blog/_config.yml</code>: 修改網站資訊，例如作者、語系以及Deploy的路徑。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line">title: 史帝芬技術分享</span><br><span class="line">subtitle: 6一波6666</span><br><span class="line">description: 寫程式就是學無止盡，不停的學習</span><br><span class="line">keywords: C<span class="comment">#</span></span><br><span class="line">author: Steven hu</span><br><span class="line">language: zh-TW <span class="comment">#切忌這個要跟你主題所提供的語言檔填上相同的欄位，否則會無法翻譯</span></span><br><span class="line">timezone: Asia/Taipei</span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line">url: https://stevenhu0124.github.io</span><br><span class="line">root: </span><br><span class="line">permalink: :year/:month/:day/:title/ (https://stevenhu0124.github.io/2020/6/10/home)</span><br><span class="line">permalink_defaults:</span><br><span class="line">pretty_urls:</span><br><span class="line">  trailing_index: <span class="literal">true</span> <span class="comment"># Set to false to remove trailing 'index.html' from permalinks</span></span><br><span class="line">  trailing_html: <span class="literal">true</span> <span class="comment"># Set to false to remove trailing '.html' from permalinks</span></span><br></pre></td></tr></table></figure></li>
<li><code>my_blog/themes/landscape/_config.yml</code>: 主題的設定檔必須參考你所使用的的主題文件，來了解他有提供那些功能，甚至是一些滑鼠的動畫。</li>
</ul>
<h1 id="新增文章"><a href="#新增文章" class="headerlink" title="新增文章"></a>新增文章</h1><pre><code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new draft home <span class="comment"># 建立一篇home的草稿，需要執行hexo server --draft才會顯示頁面中</span></span><br><span class="line">hexo new home <span class="comment"># 建立一篇home的文章</span></span><br><span class="line">hexo page home <span class="comment"># 建立一篇home的頁面</span></span><br></pre></td></tr></table></figure></code></pre><p>你可以依照上面的指令來新增文章，<code>hexo new home</code> 會在 <code>source/_posts/home</code>產生一個 <code>Markdown</code>的檔案，這時候就可以對 <code>home.md</code> 來新增內容，當然啦!還是要遵循它的<a href="https://markdown.tw/" target="_blank" rel="noopener" title="語法說明">語法</a>，比較偷懶的人可以用<a href="https://hackmd.io/" target="_blank" rel="noopener" title="HackMD">HackMD</a>，它有提供一些基本編輯的快捷鍵，改好在貼過來也可以。</p>
<h1 id="Github-Deploy"><a href="#Github-Deploy" class="headerlink" title="Github Deploy"></a>Github Deploy</h1><p>當你完成上面的修改，就可以透過Github來Deploy你的BLOG了。</p>
<h2 id="前置作業-1"><a href="#前置作業-1" class="headerlink" title="前置作業"></a>前置作業</h2><ul>
<li><p>註冊一個 <a href="https://github.com/" target="_blank" rel="noopener" title="Github">Github</a>帳號，並且新增一個 <code>Repositories</code></p>
  <img src="/images/hexo-setup_git_create.png">
</li>
<li><p>接著設定<code>Repositories</code>，名稱為 <code>username.github.io</code>，其中 <code>username</code>請填上你剛剛申請的帳號。</p>
  <img src="/images/hexo-setup_git_re.png">

</li>
</ul>
<h2 id="Hexo-設定"><a href="#Hexo-設定" class="headerlink" title="Hexo 設定"></a>Hexo 設定</h2><ul>
<li><p>再來回到<code>my_blog/_config.yml</code>的路徑底下，更新你 <code>deploy</code> 路徑</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    <span class="built_in">type</span>: git <span class="comment">#</span></span><br><span class="line">    repo: https://github.com/username/username.github.io</span><br><span class="line">    message: <span class="string">"Updated: &#123;&#123; now('YYYY-MM-DD HH:mm:ss') &#125;&#125;"</span> <span class="comment"># 每次depoly的commit 格式</span></span><br><span class="line">    name: username</span><br><span class="line">    email:</span><br></pre></td></tr></table></figure></li>
<li><p>第一次 <code>deploy</code> 需要用 <code>npm</code> 安裝 <code>git deploy</code>的套件”</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>開始 <code>deploy</code> 到你的 <code>https://github.com/username/username.github.io</code></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean <span class="comment"># 清除靜態檔</span></span><br><span class="line">hexo d -g <span class="comment"># deploy到你指定的路徑，並產生新的靜態檔</span></span><br></pre></td></tr></table></figure>
<p>大約等待3分鐘左右，你就可以直接到 <code>username.github.io</code>來看你發布的BLOG囉!</p>
</li>
</ul>
<hr>
<p>如果有任何問題，歡迎底下留言，我會盡可能的幫你解答。當然如果文章內容有理解錯誤的地方，也歡迎大家糾正，讓我們互相學習、有錯就改，這樣我們才能不斷的進步。</p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>C# Stack V.S Heap 記憶體空間配置</title>
    <url>/memory-allocate/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>還記得在念書的時候，總是要硬記許多專有名詞，定義是記起來了，但是實際上如果沒有透過實作，我覺得真的很難理解其中精華的所在，所以這次的主題會透過幾個範例，讓 <code>Stack</code> 跟 <code>Heap</code>更容易去理解。 </p>
<a id="more"></a>
<h1 id="基本介紹"><a href="#基本介紹" class="headerlink" title="基本介紹"></a>基本介紹</h1><p>在開始之前，我們先透過基本介紹，先來了解兩者間的特性。</p>
<h2 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h2><ul>
<li>靜態記憶體配置(顧名思義在編譯的時候記憶體位址已分配)</li>
<li>記憶體空間是連續的</li>
<li>資源由編譯器控制(分配、釋放)，不需要再額外控制</li>
<li>同時存放 <code>Value Type</code> 的值，存放 <code>Reference Tpye</code> 記憶體位址</li>
</ul>
<h2 id="Heap"><a href="#Heap" class="headerlink" title="Heap"></a>Heap</h2><ul>
<li>動態記憶體位址(當程式執行的時候，才會分配記憶體位址)</li>
<li>記憶體空間不連續</li>
<li>資源由設計者控制(分配、釋放)，來避免<code>Memory leak</code></li>
<li>存放 <code>Reference Tpye</code> 的值</li>
</ul>
<p>如果還不清楚<code>Value Type &amp; Reference Type</code>的請<a href="../type-compare">參考此篇</a></p>
<h1 id="實作做起來"><a href="#實作做起來" class="headerlink" title="實作做起來"></a>實作做起來</h1><p>根據上面 <code>Stack</code> 以及 <code>Heap</code> 的基本介紹後，我們再透過以下的實作讓印象更加深刻吧</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> height = <span class="number">180</span>;</span><br><span class="line">    <span class="keyword">int</span> weight = <span class="number">80</span>;</span><br><span class="line">    Person steven = <span class="keyword">new</span> Person() &#123; Height = <span class="number">180</span>, Weight = <span class="number">80</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Height &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Weight &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/images/memory-allocate_flow.png">

<p>這個部份我們用個簡易的流程圖，來解釋 <code>Main</code> 的執行流程。溫馨提醒以下步驟請搭配流程圖使用&gt;.*~。</p>
<ol>
<li>STEP1: 由於 <code>height</code> 為 <code>int</code> 屬於 <code>Value Type</code> 所以會被配置到<code>Stack</code>當中</li>
<li>STEP2: <code>weight</code> 同 STEP1， 也會配置到<code>Stack</code>中</li>
<li>STEP3: <code>Person</code> 宣告為 <code>class</code> 屬於 <code>Reference Type</code>，首先它會在 <code>stack</code> 配置一個存放 <code>steven</code> 的記憶體位址的空間，當使用者去 <code>new</code> 起來 <code>steven</code> 的時候，接著就在<code>Heap</code>上配置 <code>Person</code> 的屬性資料，再將這個存放在 <code>Heap</code> 的位址(<code>0x3333</code>)傳回給存放在 <code>Stack</code> 的記憶體位址的空間 <code>steven</code>給他參考(<code>0x3333</code>)。</li>
<li>STEP4: 當 <code>Main</code>結束離開的時候，<code>Stack</code>的內容會隨著程式結束而清空(<code>LIFO</code>)，<code>Heap</code>所存的記憶體位址不會立刻被取消分配，需等到 <code>GC</code>後才會重新開始分配此空間</li>
</ol>
<h1 id="補充說明"><a href="#補充說明" class="headerlink" title="補充說明"></a>補充說明</h1><ul>
<li>關於<code>Stack</code> 和 <code>Heap</code>的特性還是必須了解清楚，這樣當你在開發程式的時候，才能避免掉<code>System.StackOverflowException</code> 以及 <code>Memory leak</code>的問題</li>
<li><code>C#</code> 以及 <code>Java</code> 都有提供 <code>GC (Garbage Collection)</code> 的機制，該如何使用呢? 我們接下來會再有另一篇文章詳細介紹。</li>
<li>當你了解記憶體配置的基本知識後，我們就可以了解為什麼需要用到 <code>using statement</code> </li>
</ul>
<hr>
<p>如果有任何問題，歡迎底下留言，我會盡可能的幫你解答。當然如果文章內容有理解錯誤的地方，也歡迎大家糾正，讓我們互相學習、有錯就改，這樣我們才能不斷的進步。</p>
]]></content>
      <categories>
        <category>C#小知識</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
</search>
